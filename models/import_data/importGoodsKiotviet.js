const mongoose = require("mongoose");
const fs = require("fs");
const Customer = require("../Misa_CustomersSchema"); 
const BanksSchema = require("../MiSa_BanksSchema");
const GoodsSchema = require("../MiSa_GoodsSchema");
const KiotViet_Product = require("../KiotViet_Product");
const KiotViet_Category = require("../KiotViet_Category");

const MONGO_URI = "mongodb+srv://thienduc2552003:Ag1RjZY8IHBomCD3@mockdata.hacn2.mongodb.net/MockData?retryWrites=true&w=majority";

// ‚úÖ K·∫øt n·ªëi MongoDB tr∆∞·ªõc khi ch·∫°y truy v·∫•n
async function connectDB() {
    try {
        if (mongoose.connection.readyState === 1) {
            console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB.");
            return;
        }
        await mongoose.connect(MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB: ", error);
        process.exit(1);
    }
}

// ‚úÖ H√†m l·∫•y ObjectId c·ªßa category t·ª´ MongoDB
async function getObjectIdById(model, id) {
    try {
        const result = await model.findById(id.trim()).select("_id");
        return result ? result._id : null;
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y ObjectId: ${error}`);
        return null;
    }
}

// ‚úÖ H√†m chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
async function formatData() {
    const rawData = fs.readFileSync("data3.json");
    const jsonData = JSON.parse(rawData);

    // D√πng Promise.all ƒë·ªÉ ch·ªù t·∫•t c·∫£ d·ªØ li·ªáu x·ª≠ l√Ω xong
    const formattedData = await Promise.all(jsonData.map(async (item) => {
        const categoryId = await getObjectIdById(KiotViet_Category, "67ed108435f7747ac25db418");

        return {
            code: item["M√£ h√†ng"],
            name: item["T√™n h√†ng"],
            categoryId: categoryId,
            categoryName: "NATRUMAX",
            allowsSale: true,
            hasVariants: false,
            basePrice: item["Gi√° b√°n"],
            conversionValue: 1,
            description: null,
            isActive: true,
            isRewardPoint: false,
            isLotSerialControl: false,
            isBatchExpireControl: false,
            images: null,
            inventories: [
                {
                    branchId: null,
                    branchName: null,
                    cost: item["Gi√° v·ªën"],
                    onHand: item["T·ªìn kho"],
                    reserved: 0,
                    actualReserved: 0,
                    minQuantity: 0,
                    maxQuantity: 0,
                    isActive: true,
                    onOrder: 0
                }
            ]
        };
    }));

    return formattedData;
}

// ‚úÖ H√†m import d·ªØ li·ªáu v√†o MongoDB
async function importData() {
    try {
        await connectDB(); // ƒê·∫£m b·∫£o MongoDB ƒë√£ k·∫øt n·ªëi
        const formattedData = await formatData(); // Ch·ªù d·ªØ li·ªáu chuy·ªÉn ƒë·ªïi xong
        await KiotViet_Product.insertMany(formattedData); // L∆∞u v√†o DB

        console.log("‚úÖ Th√™m d·ªØ li·ªáu th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m d·ªØ li·ªáu:", error);
    } finally {
        mongoose.connection.close(); // ƒê√≥ng k·∫øt n·ªëi sau khi ho√†n th√†nh
    }
}

// üî• Ch·∫°y script import
importData();
